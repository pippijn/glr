terminals {
  3 : TOK_GREATERTHAN ">";
  2 : TOK_LESSTHAN "<";
  1 : TOK_NAME;
  0 : TOK_EOF "<EOF>";

  token(string) TOK_NAME;
}

impl_verbatim {
  let merge a b =
    "Merge(" ^ a ^ ", " ^ b ^ ")"
}

nonterm(string) File {
  -> t:TemplateId { t }
}

nonterm Identifier {
  -> n:TOK_NAME { n }
}

nonterm BinaryExpression {
  fun merge (l, r) { merge l r }
  -> e:UnqualifiedId [UnqualifiedId] { e }
  (* This is later found not to be the right branch and is dropped. *)
  -> left:BinaryExpression "<" right:UnqualifiedId [Less] { "Less(" ^ left ^ ", " ^ right ^ ")" }
}

nonterm TemplateArgumentList {
  fun merge (l, r) { merge l r }
  -> e:BinaryExpression [NonType] { e }
  -> typeid:UnqualifiedId [Type] { typeid }
}

nonterm TemplateArgumentListOpt {
  -> list:TemplateArgumentList { list }
}

nonterm TemplateId {
  -> n:Identifier "<" list:TemplateArgumentListOpt ">" [Identifier] { "TemplateId(" ^ n ^ ", " ^ list ^ ")" }
}

nonterm UnqualifiedId {
  fun merge (l, r) { merge l r }
  -> id:Identifier [Identifier] { id }
  -> id:TemplateId [TemplateId] { id }
}
