terminals {
  include("ccTerminals.ids")

  
  token(string) TOK_INT_LITERAL;
  token(string) TOK_FLOAT_LITERAL;
  token(string) TOK_CHAR_LITERAL;
  token(string) TOK_STRING_LITERAL;

  
  token(string) TOK_NAME;
  token(string) TOK_TYPE_NAME;
  token(string) TOK_VARIABLE_NAME;

  
  token(string) TOK_ANNOTATION;

  precedence {
    
    prec	200 TOK_PREFER_REDUCE;
    right	195 "::";		
    prec	190 "const" "volatile" "else" "[";

    
    

    left	120 ".*" "->*";		
    left	110 "*" "/" "%";
    left	100 "+" "-";
    left	 90 "<<" ">>";

    
    

    left	 70 "==" "!=";
    left	 60 "&";
    left	 50 "^";
    left	 40 "|";
    left	 30 "&&";
    left	 20 "||";

    
    
    
    

    prec	  1 TOK_PREFER_SHIFT;
    
  }
}


nonterm(unit) File {
  -> t:TemplateArgumentList;
}


nonterm Identifier {
  -> n:TOK_NAME {}
}


nonterm PrimaryExpression {
  fun merge(l,r) {}

  -> id:UnqualifiedId
	[Id];
}

nonterm UnqualifiedId {
  fun merge(l,r) {}

  -> id:Identifier			[Name];

  -> id:TemplateId			[Template];
}


nonterm BinaryExpression {
  
  fun merge(l,r) {}

  -> e:PrimaryExpression [PrimaryExpression];

  
  -> left:BinaryExpression "<"  right:PrimaryExpression	[Less] {}
  -> left:BinaryExpression ">"  right:PrimaryExpression	[Greater] {}
}


nonterm TypeId {
  fun merge(l,r) {}

  -> n:Identifier
	[Id];
  -> id:TemplateId
	[TemplateId];
}

nonterm TemplateArgumentListOpt {
  -> list:TemplateArgumentList;
}

nonterm TemplateId {
  -> n:Identifier "<" list:TemplateArgumentListOpt ">"
	[TemplateId] {}
}

nonterm TemplateArgumentList {
  
  fun merge(l,r) {}

  ->
     typeid:TypeId
     next:TemplateArgumentListContinuation
	[Type] {}

  ->
     e:BinaryExpression
     next:TemplateArgumentListContinuation
	[NonType] {}

}

nonterm TemplateArgumentListContinuation {
  fun merge(l,r) {}

  -> empty
	[Head] {}

  -> "," x:TemplateArgumentList
	[Tail];
}
