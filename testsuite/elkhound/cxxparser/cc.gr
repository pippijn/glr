terminals {
  include("ccTerminals.ids")
  
  token(string) TOK_INT_LITERAL;
  token(string) TOK_FLOAT_LITERAL;
  token(string) TOK_CHAR_LITERAL;
  token(string) TOK_STRING_LITERAL;

  
  token(string) TOK_NAME;
  token(string) TOK_TYPE_NAME;
  token(string) TOK_VARIABLE_NAME;

  
  token(string) TOK_ANNOTATION;
}


nonterm(unit) File {
  -> t:TemplateArgumentList	{}
}


nonterm Identifier {
  -> n:TOK_NAME			{}
}


nonterm PrimaryExpression {
  -> id:UnqualifiedId			[Id]	{}
}

nonterm UnqualifiedId {
  fun merge(l,r) {}

  -> id:Identifier			[Name]	{}
  -> id:TemplateId			[Template]	{}
}


nonterm BinaryExpression {
  -> e:PrimaryExpression [PrimaryExpression]	{}
}


nonterm TypeId {
  fun merge(l,r) {}

  -> n:Identifier	[Id]	{}
  -> id:TemplateId	[TemplateId]	{}
}

nonterm TemplateArgumentListOpt {
  -> list:TemplateArgumentList	{}
}

nonterm TemplateId {
  -> n:Identifier "<" list:TemplateArgumentListOpt ">"
	[TemplateId]	{}
}

nonterm TemplateArgumentList {
  
  fun merge(l,r) {}

  ->
     typeid:TypeId
     next:TemplateArgumentListContinuation
	[Type]	{}

  ->
     e:BinaryExpression
     next:TemplateArgumentListContinuation
	[NonType]	{}

}

nonterm TemplateArgumentListContinuation {
  fun merge(l,r) 	{}

  -> empty
	[Head]		{}

  -> "," x:TemplateArgumentList
	[Tail]		{}
}
