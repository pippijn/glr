terminals {
  0 : TOK_EOF	"<EOF>";
  1 : TOK_COMMA	",";
  2 : TOK_NAME;

  token(string) TOK_NAME;
}


nonterm(unit) File {
  -> t:TemplateArgumentList				{}
}


nonterm PrimaryExpression {
  -> id:UnqualifiedId					{}
}


nonterm UnqualifiedId {
  fun merge(l,r) {}

  -> id:TOK_NAME	[Name]				{}
}


nonterm TypeId {
  fun merge(l,r) {}

  -> n:TOK_NAME	[Id]					{}
}


nonterm BinaryExpression {
  -> e:PrimaryExpression				{}
}


nonterm TemplateArgumentListOpt {
  -> list:TemplateArgumentList				{}
}


nonterm TemplateArgumentList {
  fun merge(l,r) {}

  -> typeid:TypeId next:TemplateArgumentListContinuation
	[Type]						{}

  -> e:BinaryExpression next:TemplateArgumentListContinuation
	[NonType]					{}
}


nonterm TemplateArgumentListContinuation {
  fun merge(l,r) {}

  -> empty
	[Head]						{}

  -> "," x:TemplateArgumentList
	[Tail]						{}
}
